% two kinds of reduced models for neural oscillations

%% Setting paths
addpath(genpath(pwd));


%% Reduced network: Syn, small-size

param2.ne       = 75;
param2.ni       = 25;
param2.p_ee     = 0.15;
param2.p_ie     = 0.5;
param2.p_ei     = 0.5;
param2.p_ii     = 0.4;
param2.s_ee     = 25;
param2.s_ie     = 10;
param2.M        = 100;
param2.Mr       = 66;
param2.lambda_e = 1/7;
param2.lambda_i = 1/7;
param2.tau_ee   = 1.3;
param2.tau_ie   = 0.95;
param2.tau_i    = 4.5;
param2.method     ='truncate' % or 'extend' 

load('res7');
res=res6;%the struct in res7.mat is res6
q=[1,0.5,1.5,1,0.42,0.7,1.3];

name11 = 'n=100-t=1000-syn-noref';
save=false;
param2.type       ='syn';

s=false;

duration_time=1000;

P = P_generation_histogram(param2, res);
res11 = model_reduced_network_P(s,duration_time,param2, P,q);
scatterplot(res11,param2,name11,save);

%% Reduced network: Reg, small-size

param12.ne       = 75;
param12.ni       = 25;
param12.p_ee     = 0.15;
param12.p_ie     = 0.5;
param12.p_ei     = 0.5;
param12.p_ii     = 0.4;
param12.s_ee     = 25;
param12.s_ie     = 10;
param12.M        = 100;
param12.Mr       = 66;
param12.lambda_e = 1/7;
param12.lambda_i = 1/7;
param12.tau_ee   = 2;
param12.tau_ie   = 1.2;
param12.tau_i    = 4.5;
param12.method     ='truncate' % or 'extend' 

load('res7');
res=res6;%the struct in res7.mat is res6
q=[1,0.5,1.5,1,0.42,0.7,1.3];

name10 = 'n=100-t=1000-reg-noref';
save=false;
param12.type       ='reg';

s=false;

duration_time=1000;

P = P_generation_histogram(param12, res);
res12 = model_reduced_network_P(s,duration_time,param12, P,q);
scatterplot(res12,param12,name12,save);

%% Reduced network: Hom, small-size

param13.ne       = 75;
param13.ni       = 25;
param13.p_ee     = 0.15;
param13.p_ie     = 0.5;
param13.p_ei     = 0.5;
param13.p_ii     = 0.4;
param13.s_ee     = 25;
param13.s_ie     = 10;
param13.M        = 100;
param13.Mr       = 66;
param13.lambda_e = 1/7;
param13.lambda_i = 1/7;
param13.tau_ee   = 4;
param13.tau_ie   = 1.2;
param13.tau_i    = 4.5;
param13.method     ='truncate' % or 'extend' 

load('res7');
res=res6;
q=[1,0.5,1.5,1,0.42,0.7,1.3];
    
name13 = 'n=100-t=1000-hom-noref';
save=false;
param13.type       ='hom';

s=false;

duration_time=1000;

P = P_generation_histogram(param13, res);
res13 = model_reduced_network_P(s,duration_time,param13, P,q);
scatterplot(res13,param13,name13,save);

%% Coarse grained fixed probabiliy model:

c=0.2;
param1.ne=75;
param1.ni=25;

param1.P_BE_Ex=0.0067*ones(1,76)*c;
param1.P_BI_Ex=0.0104*ones(1,26)*c;
param1.P_GE_Ex=0.02*ones(1,76)*c;
param1.P_GI_Ex=0.00247*ones(1,26)*c;
param1.P_BE_E=0.029*ones(1,76)*c;
param1.P_BI_E=0.07*ones(1,26)*c;
param1.P_BE_E=ones(1,76)*c;
param1.P_GI_E=ones(1,26)*c;
param1.P_GE_I=ones(1,76)*c;
param1.P_GI_I=ones(1,26)*c;




param1.lambda_e = 1/7;
param1.lambda_i = 1/7;
param1.tau_ee   = 1.3;
param1.tau_ie   = 0.95;
param1.tau_i    = 4.5;
param1.S_e = 24;
param1.S_i = 48;
param1.a_ee=0.55;
param1.a_ie=0.45;
param1.a_ei=0.79;
param1.a_ii=0.21;
param1.pending_i_maximum=2000000;
param1.pending_e_maximum=1000000;
duration_time   = 1000;

%random initialization
s=ones(1,4);
res10=model_coarse_grained(s,duration_time,param1,P1, 0.2,0.15);
coarse_grained_plot(param1, res7, duration_time,'syn','111',false)
% line_graph(res7,time_delta,ne, ni, name)

%% Coarse grained fixed probabiliy model:

c=0.2;
param1.ne=75;
param1.ni=25;

param1.P_BE_Ex=0.0067*ones(1,76)*c;
param1.P_BI_Ex=0.0104*ones(1,26)*c;
param1.P_GE_Ex=0.02*ones(1,76)*c;
param1.P_GI_Ex=0.00247*ones(1,26)*c;
param1.P_BE_E=0.029*ones(1,76)*c;
param1.P_BI_E=0.07*ones(1,26)*c;
param1.P_BE_E=ones(1,76)*c;
param1.P_GI_E=ones(1,26)*c;
param1.P_GE_I=ones(1,76)*c;
param1.P_GI_I=ones(1,26)*c;




param1.lambda_e = 1/7;
param1.lambda_i = 1/7;
param1.tau_ee   = 1.3;
param1.tau_ie   = 0.95;
param1.tau_i    = 4.5;
param1.S_e = 24;
param1.S_i = 48;
param1.a_ee=0.55;
param1.a_ie=0.45;
param1.a_ei=0.79;
param1.a_ii=0.21;
param1.pending_i_maximum=2000000;
param1.pending_e_maximum=1000000;
duration_time   = 1000;

%random initialization
s=ones(1,4);
res10=model_coarse_grained(s,duration_time,param1,P1, 0.2,0.15);
coarse_grained_plot(param1, res7, duration_time,'syn','111',false)
% line_graph(res7,time_delta,ne, ni, name)
